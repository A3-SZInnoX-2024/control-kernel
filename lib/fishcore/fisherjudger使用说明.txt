此程序为给出机器人下一步决策的程序 
请求给出决策需要调用 solve() 函数，括号内传递一个自定义类型 State，输入 State 类型可以调用 readstate()函数
详情见 输入/输出 格式
举例：

......
State x;
x=readstate();
int judge=solve(x);
if(judge==10){
	......
}else if(judge==11){
	.......
}else ......
......

readstate()输入格式 
一个浮点数：时间
一个浮点数：已经赚的金币数
一个整数 a，然后 a 个正整数，表示左鱼池剩下的鱼

(1 代表蓝鱼，2 代表绿鱼，3 代表黄鱼，4 代表红鱼，5 代表饲料，下同） 

一个整数 b，然后 b 个正整数，表示右鱼池剩下的鱼
四个整数，分别表示鱼塘左侧，右侧，前面，后面的鱼的种类（没有就输出 0，下同）
两个浮点数，左鱼贩和右鱼贩分别剩余的时间
两个整数，左鱼贩和右鱼贩正在处理的鱼的种类
一个整数  {0，5}，饵料台是否有饵料
一个整数  {0，1}，这一阶段是否打过窝
一个整数 代表机器人所在的位置 （见七点编码图）
一个整数 c 代表机器人仓库内有多少鱼（或饲料），接下来 c 个整数表示机器人的仓库情况 （由大到小排序）

举例：
114.0   514.0
3 4 3 2
0
0 4 0 3
19.19    0.0
3  0
0
0
6
6 5 4 4 3 2 1


输出格式
0 ：报错 
10 ：前往 0 号节点
11 ：前往 1 号节点 
12 ：前往 2 号节点 
13 ：前往 3 号节点 
14 ：前往 4 号节点 
15 ：前往 5 号节点 
16 ：前往 6 号节点
21 ：原地等待 1 秒
22 ：原地等待 2 秒
23 ：原地等待 4 秒 
31 ：从鱼塘抓一个东西
32 ：从鱼池抓一个东西
33 ：从饲料台抓一个东西
41 ：（向当前所在位置的鱼贩）扔一条蓝鱼
42 ：（向当前所在位置的鱼贩）扔一条绿鱼
43 ：（向当前所在位置的鱼贩）扔一条黄鱼
44 ：（向当前所在位置的鱼贩）扔一条红鱼 
45 ：（向鱼塘）扔饲料 